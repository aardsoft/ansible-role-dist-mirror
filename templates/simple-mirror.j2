#jinja2: lstrip_blocks: True
#!/bin/bash
# {{ ansible_managed }}

{% set _rsync = dist_mirrors[mirror.key].rsync|default(dist_mirror_rsync)%}
{% if dist_mirrors[mirror.key].proxy_host is defined %}
{% set _proxy = dist_mirrors[mirror.key].proxy_host %}
{% elif dist_mirrors.proxy_host is defined and (dist_mirrors[mirror.key].no_proxy is undefined or dist_mirrors[mirror.key].no_proxy == false) %}
{% set _proxy = dist_mirrors.proxy_host %}
{% elif proxy_host is defined and proxy_enabled is defined and proxy_enabled == "yes" and (dist_mirrors[mirror.key].no_proxy is undefined or dist_mirrors[mirror.key].no_proxy == false) %}
{% set _proxy = proxy_host %}
{% endif %}

{% if _proxy is defined %}
export RSYNC_PROXY={{_proxy}}
export http_proxy={{_proxy}}
export https_proxy={{_proxy}}
export PROXY={{_proxy}}
{% endif %}

{% set _mirror_suffix = dist_mirrors[mirror.key].directory|default(mirror.key) %}
{% if dist_mirrors[mirror.key].mirror_base is defined %}
{% set _mirror_dir = dist_mirrors[mirror.key].mirror_base + '/' + _mirror_suffix %}
{% else %}
{% set _mirror_dir = dist_mirrors.mirror_base + '/' + _mirror_suffix %}
{% endif %}

mkdir -p {{_mirror_dir}}/

{% if mirror.key == 'opensuse' or mirror.value.type|default('') == 'opensuse' %}
  {% set _mirror_source = dist_mirrors[mirror.key].mirror_source|default('rsync.nic.funet.fi::ftp/pub/mirrors/ftp.opensuse.com/pub/opensuse') %}
{{_rsync}} {{_mirror_source}} {{_mirror_dir}}/ {% if dist_mirrors[mirror.key].includes is defined %}{% for include in dist_mirrors[mirror.key].includes %}--include "{{include}}" {% endfor %}{% endif %}{% if dist_mirrors[mirror.key].excludes is defined %}{% for exclude in dist_mirrors[mirror.key].excludes %}--exclude "{{exclude}}" {% endfor %}{% endif %}
{% elif mirror.key == 'centos' %}
  {% if dist_mirrors[mirror.key].releases is defined %}
  {% set _centos_releases = dist_mirrors[mirror.key].releases|join(" ") %}
  {% else %}
  {% set _centos_releases = "7 8" %}
  {% endif %}
CENTOS_RELEASES="{{_centos_releases}}"

mkdir -p {{dist_mirrors.mirror_base}}/CentOS/
for _REL in $CENTOS_RELEASES; do
  {{_rsync}} rsync.nic.funet.fi::ftp/pub/mirrors/centos.org/$_REL/ {{_mirror_dir}}/$_REL/
done

  {% if dist_mirrors[mirror.key].archived_releases is defined %}
CENTOS_ARCHIVED_RELEASES="{{dist_mirrors[mirror.key].archived_releases|join(" ")}}"

for _REL in $CENTOS_ARCHIVED_RELEASES; do
    {{_rsync}} rsync://archive.kernel.org/centos-vault/$_REL/ {{_mirror_dir}}/$_REL/
done
  {% endif %}
{% elif mirror.key == 'elrepo' %}
{{_rsync}} lon.mirror.rackspace.com::elrepo/ {{_mirror_dir}} {% if dist_mirrors.elrepo.excludes is defined %}{% for exclude in dist_mirrors.elrepo.excludes %}--exclude "{{exclude}}" {% endfor %}{% endif %}
{% elif mirror.key == 'py-modules' %}
  {% if dist_mirrors[mirror.key].pyvers is defined %}
  {% set _pyvers = dist_mirrors[mirror.key].pyvers|join(" ") %}
  {% else %}
  {% set _pyvers = "36" %}
  {% endif %}

PYVERS="{{_pyvers}}"
PLATFORMS="{{_platforms}}"
IMPL="cp"

for PYVER in $PYVERS; do
  REQF="${DEST}/py${PYVER}.requirements"
  if test -f "${REQF}"; then
    mkdir -p "${DEST}"
    while read REQ; do
      pip3 download --proxy "${PROXY}" --no-binary=:all: "${REQ}" -d "${DEST}"
      for PLAT in $PLATFORMS; do
        pip3 download --proxy "${PROXY}" --platform ${PLAT} --python-version ${PYVER} --implementation cp --abi cp${PYVER}m --only-binary=:all: "${REQ}" -d "${DEST}"
      done
    done < "${REQF}"
  fi
done
{% endif %}
